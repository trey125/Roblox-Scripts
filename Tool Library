--// By Trey135421 \\--

--if _G.Loaded then return warn('Script already injected, rejoin game.')
--else _G.Loaded = true end

--< Globals >--
local Players = game:GetService('Players')
local UIS = game:GetService('UserInputService')
local RS = game:GetService('ReplicatedStorage')
local RunService = game:GetService('RunService')

--< Variables >--
_G.Settings = {
	Connections = {}
}
_G.Globals = {
	l_Player = Players.LocalPlayer,
	l_Char = Players.LocalPlayer.Character,
	l_HRP = Players.LocalPlayer.Character:WaitForChild('HumanoidRootPart', 5),
	CurrentCamera = workspace.Camera,
	Mouse = Players.LocalPlayer:GetMouse()
}

--< Functions >--

Funcs = {}
do
	function Funcs:Start()
		pcall(function() 
			task.spawn(function()
				Funcs:addConn(_G.Globals.l_Player.CharacterAdded, function(char)
					_G.Globals.l_Char = char
					_G.Globals.l_HRP = _G.Globals.l_Globals:WaitForChild('HumanoidRootPart', 5)
				end)
			end) 
		end)
	end
	function Funcs:Destroy()
		for i,v in pairs(_G.Settings.Connections) do 
      v:Disconnect()
      v = nil
    end
	end

	function Funcs:addSignal(object, property, func)
		table.insert(_G.Settings.Connections, object:GetPropertyChangedSignal(property):Connect(func))
	end
	function Funcs:addConn(conn, func)
		table.insert(_G.Settings.Connections, conn:Connect(func))
	end
	
	function Funcs:GetDist(pos1, pos2)
		return (pos1 - pos2)
	end
	function Funcs:GetMag(pos1, pos2)
		return (pos1 - pos2).Magnitude
	end
	
	function Funcs:GetAttr(o, a)
		return o:GetAttribute(a)
	end
	function Funcs:GetAttr_ALL(o)
		return o:GetAttributes()
	end
	function Funcs:SetAttr(o, a, v)
		o:SetAttribute(a, v)
	end
	
	function Funcs:W2S(pos)
		return _G.Vars.CurrentCamera:WorldToViewportPoint(pos)
	end
	
	function Funcs:Round(n)
		return math.round(n*100)/100
	end
	
	function Funcs:RemoveFromTable(Table, Item)
		for Idx,Val in pairs(Table) do
			if v == Item then table.remove(Table, i) end
		end
	end
	
	function PlayerValid(Player, Char)
		return Player and Players:FindFirstChild(Player.Name) and Char and Char:FindFirstChild('HumanoidRootPart') and Char:FindFirstChild('Humanoid') and Char:FindFirstChild('Humanoid').Health > 0
	end
end

return Funcs
