--< variables >--


-- global
local v3n = Vector3.new
local v3z = Vector3.zero

local v2n = Vector2.new
local v2z = Vector2.zero

local cfn = CFrame.new
local cfz = CFrame.zero

local c3n = Color3.new
local c3rgb = Color3.fromRGB
local c3hsb = Color3.fromHSV

local un = UDim.new
local u2n = UDim2.new

local t_insert = table.insert
local t_clear = table.clear
local t_unpack = table.unpack
local t_find = table.find

-- local
local uis = game:GetService('UserInputService')
local tween = game:GetService('TweenService')
local rs = game:GetService('RunService')
local ts = game:GetService('TextService')

local mouse = game:GetService('Players').LocalPlayer:GetMouse()

local library = {
	connections = {},
	reg = {}
}
library.theme = {
	main = c3rgb(30, 30, 30),
	bg = c3rgb(20, 20, 20),
	
	dark_main = c3rgb(15, 15, 15),
	dark_bg = c3rgb(10, 10, 10),
	
	outline = c3rgb(50, 50, 50),
	accent = c3rgb(170, 130, 255),
	
	n_text = c3rgb(255, 255, 255),
	a_text = c3rgb(255, 255, 255),
	i_text = c3rgb(150, 150, 150)
}

--< functions >--

-- special
local special = {}

function special:keybind(properties)
	local keybind = {}
	
	local bind = properties.bind
	local watching = false
	
	local shortened = {
		[Enum.KeyCode.LeftAlt] = 'LAlt',
		[Enum.KeyCode.RightAlt] = 'RAlt',
		[Enum.KeyCode.LeftShift] = 'LShift',
		[Enum.KeyCode.RightShift] = 'RShift',
		[Enum.KeyCode.LeftControl] = 'LCtrl',
		[Enum.KeyCode.RightControl] = 'RCtrl',
		[Enum.KeyCode.One] = '1',
		[Enum.KeyCode.Two] = '2',
		[Enum.KeyCode.Three] = '3',
		[Enum.KeyCode.Four] = '4',
		[Enum.KeyCode.Five] = '5',
		[Enum.KeyCode.Six] = '6',
		[Enum.KeyCode.Seven] = '7',
		[Enum.KeyCode.Eight] = '8',
		[Enum.KeyCode.Nine] = '9',
		[Enum.KeyCode.Zero] = '0',
	}
	local blacklisted = {
		Enum.KeyCode.Slash,
		Enum.KeyCode.Escape,
		Enum.KeyCode.Space
	}
	local mouse_keys = {
		[Enum.UserInputType.MouseButton1] = 'MB1',
		[Enum.UserInputType.MouseButton2] = 'MB2',
		[Enum.UserInputType.MouseButton3] = 'MB3'
	}
	
	-- create elements
	local keybind_label = library:create('text', {
		Position = u2n(.9, 5, 0, 0),
		Size = u2n(.1, 0, 1, 0),
		Text = '[none]',
		TextColor3 = library.theme.i_text,
		TextXAlignment = Enum.TextXAlignment.Right,
		Parent = self.Instance
	})
	
	if shortened[bind] then
		keybind_label.Text = '[' .. shortened[bind] .. ']'
	elseif bind.Name then
		keybind_label.Text = '[' .. bind.Name .. ']'
	end
	
	-- functions
	library:conn(uis.InputBegan, function(i, gpe)
		if not gpe then
			if watching then
				if i.UserInputType == Enum.UserInputType.Keyboard then
					if not t_find(blacklisted, i.KeyCode) then
						bind = i.KeyCode
						keybind_label.Text = shortened[i.KeyCode] and '[' .. shortened[i.KeyCode] .. ']' or '[' .. i.KeyCode.Name .. ']'
						watching = false
					end
				else
					--[[
					bind = i.KeyCode
					keybind_label.Text = '[' .. mouse_keys[i.UserInputType] .. ']'
					watching = false
					]]--
				end
			else
				if i.KeyCode == bind then
					if properties.callback then
						properties.callback()
						if self.change_val then
							self:change_val(not self.value)
						end
					end
				end
			end
		end
	end)
	
	library:conn(keybind_label.InputBegan, function(i)
		if i.UserInputType == Enum.UserInputType.MouseButton1 then
			keybind_label.Text = '[...]'
			bind = nil
			watching = true
		end
	end)
	
	-- return
	keybind.Instance = keybind_label
	return keybind
end

special.__index = special
special.__namecall = function(A, B, ...) return A[B](...) end

-- normal
local base = {}

function base:label(properties)
	local label = {}
	
	-- create elements
	local label_instance = library:create('text', {
		Size = u2n(1, 0, 0, 20),
		Text = properties.text,
		TextColor3 = library.theme.n_text,
		TextXAlignment = Enum.TextXAlignment.Left,
		ZIndex = 2,
		Parent = self.container
	})
	
	-- add to registry
	library:add_to_registry(label_instance, {
		['TextColor3'] = 'n_text'
	})
	
	-- functions
	function label:change_text(new)
		label_instance.Text = new
	end
	
	-- return
	label.Instance = label_instance
	setmetatable(label, special)
	return label
end
function base:button(properties)
	local button = {}
	
	-- create elements
	local button_outer = library:create('frame', {
		BackgroundColor3 = c3rgb(0, 0, 0),
		BorderSizePixel = 0,
		Size = u2n(1, 0, 0, 20),
		Parent = self.container
	})
	local button_inner = library:create('frame', {
		BackgroundColor3 = library.theme.main,
		BorderColor3 = library.theme.outline,
		BorderMode = Enum.BorderMode.Inset,
		Position = u2n(0, 1, 0, 1),
		Size = u2n(1, -2, 1, -2),
		Parent = button_outer
	})
	local button_title = library:create('text', {
		Size = u2n(1, 0, 1, 0),
		Text = properties.text,
		TextColor3 = library.theme.n_text,
		Parent = button_inner
	})
	
	-- add to registry
	library:add_to_registry(button_inner, {
		['BackgroundColor3'] = 'main',
		['BorderColor3'] = 'outline'
	})
	library:add_to_registry(button_title, {
		['TextColor3'] = 'n_text'
	})
	
	-- functions
	function button:change_func(new)
		properties.callback = new
	end
	function button:change_text(new)
		button_title.Text = new
	end
	
	library:conn(button_outer.InputBegan, function(i) 
		if i.UserInputType == Enum.UserInputType.MouseButton1 then
			if properties.callback then properties.callback() end
		end
	end)
	library:conn(button_outer.MouseEnter, function(i)
		button_inner.BorderColor3 = library.theme.accent
		library.reg[button_inner].Properties['BorderColor3'] = 'accent'
	end)
	library:conn(button_outer.MouseLeave, function(i)
		button_inner.BorderColor3 = library.theme.outline
		library.reg[button_inner].Properties['BorderColor3'] = 'outline'
	end)
	
	-- return
	button.Instance = button_outer
	return button
end
function base:toggle(properties)
	local toggle = {}
	local value = properties.default or false
	
	-- create elements
	local toggle_frame = library:create('frame', {
		BackgroundTransparency = 1,
		Size = u2n(1, 0, 0, 15),
		Parent = self.container
	})
	local toggle_outer = library:create('frame', {
		BackgroundColor3 = c3rgb(0, 0, 0),
		BorderSizePixel = 0,
		Size = u2n(0, 15, 1, 0),
		Parent = toggle_frame
	})
	local toggle_inner = library:create('frame', {
		BackgroundColor3 = library.theme.bg,
		BorderColor3 = value and library.theme.accent or library.theme.outline,
		BorderMode = Enum.BorderMode.Inset,
		Position = u2n(0, 1, 0, 1),
		Size = u2n(1, -2, 1, -2),
		Parent = toggle_outer
	})
	local toggle_color = library:create('frame', {
		BackgroundColor3 = value and library.theme.accent or library.theme.main,
		BorderColor3 = c3rgb(0, 0, 0),
		Position = u2n(0, 1, 0, 1),
		Size = u2n(1, -2, 1, -2),
		Parent = toggle_inner
	})
	
	local toggle_title = library:create('text', {
		Position = u2n(0, 20, 0, -1),
		Size = u2n(1, -20, 1, 0),
		TextXAlignment = Enum.TextXAlignment.Left,
		Text = properties.text,
		TextColor3 = value and library.theme.a_text or library.theme.i_text,
		Parent = toggle_frame
	})
	
	-- add to registry
	library:add_to_registry(toggle_inner, {
		['BackgroundColor3'] = 'bg',
		['BorderColor3'] = value and 'accent' or 'outline'
	})
	library:add_to_registry(toggle_color, {
		['BackgroundColor3'] = value and 'accent' or 'main'
	})
	library:add_to_registry(toggle_title, {
		['TextColor3'] = value and 'a_text' or 'i_text'
	})
	
	-- functions
	function toggle:change_func(new)
		properties.callback = new
	end
	function toggle:change_val(new)
		value = new
		toggle.value = value
		
		toggle_color.BackgroundColor3 = value and library.theme.accent or library.theme.main
		library.reg[toggle_color].Properties['BackgroundColor3'] = value and 'accent' or 'main'

		toggle_title.TextColor3 = value and library.theme.a_text or library.theme.i_text
		library.reg[toggle_title].Properties['TextColor3'] = value and 'a_text' or 'i_text'
		
		if value then
			toggle_inner.BorderColor3 = library.theme.accent
			library.reg[toggle_inner].Properties['BorderColor3'] = 'accent'
		else
			toggle_inner.BorderColor3 = library.theme.outline
			library.reg[toggle_inner].Properties['BorderColor3'] = 'outline'
		end
	end
	
	library:conn(toggle_frame.InputBegan, function(i) 
		if i.UserInputType == Enum.UserInputType.MouseButton1 then
			value = not value
			
			toggle_color.BackgroundColor3 = value and library.theme.accent or library.theme.main
			library.reg[toggle_color].Properties['BackgroundColor3'] = value and 'accent' or 'main'
			
			toggle_title.TextColor3 = value and library.theme.a_text or library.theme.i_text
			library.reg[toggle_title].Properties['TextColor3'] = value and 'a_text' or 'i_text'
			
			if properties.callback then 
				properties.callback(value)
				toggle.value = value
			end
		end
	end)
	library:conn(toggle_frame.MouseEnter, function()
		toggle_inner.BorderColor3 = library.theme.accent
		library.reg[toggle_inner].Properties['BorderColor3'] = 'accent'
	end)
	library:conn(toggle_frame.MouseLeave, function()
		if not value then
			toggle_inner.BorderColor3 = library.theme.outline
			library.reg[toggle_inner].Properties['BorderColor3'] = 'outline'
		end
	end)
	
	-- return
	toggle.Instance = toggle_frame
	toggle.value = value
	setmetatable(toggle, special)
	return toggle
end
function base:slider(properties)
	local slider = {}
	
	local value = properties.default
	local min = properties.min
	local max = properties.max
	local prefix = properties.prefix or ''
	local increment = properties.inc or properties.increment or 1
	
	local dragging = false
	
	-- create elements
	local slider_frame = library:create('frame', {
		BackgroundTransparency = 1,
		Size = u2n(1, 0, 0, 35),
		Parent = self.container
	})
	local slider_outer = library:create('frame', {
		BackgroundColor3 = library.theme.outline,
		BorderColor3 = c3rgb(0, 0, 0),
		Position = u2n(0 ,0, .5, 0),
		Size = u2n(1, 0, 0, 15),
		Parent = slider_frame
	})
	local slider_inner = library:create('frame', {
		BackgroundColor3 = library.theme.main,
		BorderColor3 = c3rgb(0, 0, 0),
		BorderMode = Enum.BorderMode.Inset,
		Position = u2n(0, 1, 0, 1),
		Size = u2n(1, -2, 1, -2),
		Parent = slider_outer
	})
	local slider_color = library:create('frame', {
		BackgroundColor3 = library.theme.accent,
		BorderSizePixel = 0,
		Size = u2n(value / max, 0, 1, 0),
		Parent = slider_inner
	})
	
	local slider_title = library:create('text', {
		Size = u2n(1, 0, 0, 20),
		Text = properties.text .. ': ' .. tostring(value) .. prefix,
		TextColor3 = library.theme.n_text,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = slider_frame
	})
	
	-- add to registry
	library:add_to_registry(slider_outer, {
		['BackgroundColor3'] = 'outline'
	})
	library:add_to_registry(slider_inner, {
		['BackgroundColor3'] = 'main'
	})
	library:add_to_registry(slider_color, {
		['BackgroundColor3'] = 'accent'
	})
	library:add_to_registry(slider_title, {
		['TextColor3'] = 'n_text'
	})
	
	-- functions
	local function value_changed()
		slider_color.Size = u2n(0, math.clamp((mouse.x - slider_inner.AbsolutePosition.X), 0, slider_inner.AbsolutePosition.X), 1, 0)
		
		local new_value = (slider_color.Size.X.Offset / slider_inner.AbsoluteSize.X) * (max - min) + min
		value = math.clamp(increment * math.floor(new_value / increment), min, max)
		
		slider_title.Text = properties.text .. ': ' .. tostring(value) .. prefix
		slider_color.Size = u2n(value / 100, 0, 1, 0)
		
		if properties.callback then properties.callback(value) end
	end
	
	function slider:change_func(new)
		properties.callback = new
	end
	function slider:change_value(new)
		value = new
		value_changed()
	end
	
	library:conn(slider_outer.InputBegan, function(i)
		if i.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			value_changed()
		end
	end)
	library:conn(slider_outer.InputEnded, function(i)
		if i.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)
	library:conn(mouse.Move, function()
		if dragging then value_changed() end
	end)
	library:conn(slider_outer.MouseEnter, function()
		slider_outer.BackgroundColor3 = library.theme.accent
		library.reg[slider_outer].Properties['BackgroundColor3'] = 'accent'
	end)
	library:conn(slider_outer.MouseLeave, function()
		slider_outer.BackgroundColor3 = library.theme.outline
		library.reg[slider_outer].Properties['BackgroundColor3'] = 'outline'
	end)
	
	-- return
	slider.Instance = slider_frame
	return slider
end

base.__index = base
base.__namecall = function(A, B, ...) return A[B](...) end

-- library
function library:unload()
	for i,v in pairs(self.connections) do
		v:Disconnect()
	end
	
	if library.gui then
		library.gui:Destroy()
	end
	t_clear(library)
	_G.Sentra = nil
end
function library:create(class, ...)
	local Args = t_unpack({...})
	local Shortened = {
		['frame'] = 'Frame',
		['Text'] = 'TextLabel',
		['text'] = 'TextLabel',
		['Layout'] = 'UIListLayout',
		['layout'] = 'UIListLayout'
	}
	
	if type(class) ~= 'string' then return 'class was not a <string>' end
	
	class = Shortened[class]
	
	local i = Instance.new(class)
	for Property, Value in pairs(Args) do
		i[Property] = Value
	end
	
	if class == 'TextLabel' then
		i['BackgroundTransparency'] = 1
		i['Font'] = Enum.Font.RobotoMono
		i['TextSize'] = 14
		i['TextStrokeTransparency'] = 0
	end
	
	return i
end
function library:conn(conn, callback)
	table.insert(library.connections, conn:Connect(callback))
end

function library:add_to_registry(inst, prop)
	local data = {
		Instance = inst,
		Properties = prop, -- { 'TextColor3' = 'FontColor' }
		Index = #library.reg + 1
	}
	
	library.reg[inst] = data
end
function library:remove_from_registry(inst)
	table.remove(library.reg, library.reg[inst].Index)
end
function library:update_theme(new_theme)
	for Object, Data in pairs(library.reg) do -- { Inner = <Table> Data = { <Instance> Instance, <Table> Properties, <Number> Index } }
		for Property, ColorIdx in pairs(Data.Properties) do -- { ['BackgroundColor3'] = 'accent', ['BorderColor3'] = 'main' }
			Data.Instance[Property] = new_theme[ColorIdx]
		end
	end
end

function library:text_bounds(Text, Size)
	return ts:GetTextSize(Text, Size, Enum.Font.RobotoMono, v2n(1920, 1080)).X
end

function library:menu(title)
	local menu = {
		tabs = {}
	}
	
	-- create elements
	library.gui = Instance.new('ScreenGui', game.CoreGui)
	
	local outer = library:create('frame', {
		BackgroundColor3 = c3rgb(0, 0, 0),
		BorderSizePixel = 0,
		Position = u2n(0, 400, 0, 50),
		Size = u2n(0, 550, 0, 600),
		Parent = library.gui
	})
	local inner = library:create('frame', {
		BackgroundColor3 = library.theme.main,
		BorderColor3 = library.theme.accent,
		BorderMode = Enum.BorderMode.Inset,
		Position = u2n(0, 1, 0, 1),
		Size = u2n(1, -2, 1, -2),
		Parent = outer
	})
	local main_outer = library:create('frame', {
		BackgroundColor3 = library.theme.bg,
		BorderColor3 = library.theme.outline,
		Position = u2n(0, 5, 0, 20),
		Size = u2n(1, -10, 1, -25),
		Parent = inner
	})
	local main_inner = library:create('frame', {
		BackgroundColor3 = library.theme.bg,
		BorderColor3 = c3rgb(0, 0, 0),
		Position = u2n(0, 1, 0, 1),
		Size = u2n(1, -2, 1, -2),
		Parent = main_outer
	})
	
	local button_area_outer = library:create('frame', {
		BackgroundColor3 = c3rgb(0, 0, 0),
		BorderSizePixel = 0,
		Position = u2n(0, 5, 0, 5),
		Size = u2n(1, -10, 0, 35),
		Parent = main_inner
	})
	local button_area_inner = library:create('frame', {
		BackgroundColor3 = library.theme.bg,
		BorderColor3 = library.theme.outline,
		BorderMode = Enum.BorderMode.Inset,
		Position = u2n(0, 1, 0, 1),
		Size = u2n(1, -2, 1, -2),
		Parent = button_area_outer
	})
	
	local section_area_outer = library:create('frame', {
		BackgroundColor3 = c3rgb(0, 0, 0),
		BorderSizePixel = 0,
		Position = u2n(0, 5, 0, 41),
		Size = u2n(1, -10, 1, -46),
		Parent = main_inner
	})
	local section_area_inner = library:create('frame', {
		BackgroundColor3 = library.theme.main,
		BorderColor3 = library.theme.outline,
		BorderMode = Enum.BorderMode.Inset,
		Position = u2n(0, 1, 0, 1),
		Size = u2n(1, -2, 1, -2),
		Parent = section_area_outer
	})
	
	local title = library:create('text', {
		Position = u2n(0, 5, 0, 0),
		Size = u2n(1, -10, 0, 20),
		Text = title,
		TextColor3 = library.theme.n_text,
		Parent = inner
	})
	
	local button_layout = library:create('layout', {
		FillDirection = Enum.FillDirection.Horizontal,
		Parent = button_area_inner
	})
	
	-- add to registry
	library:add_to_registry(inner, {
		['BackgroundColor3'] = 'main',
		['BorderColor3'] = 'accent'
	})
	library:add_to_registry(main_outer, {
		['BackgroundColor3'] = 'bg',
		['BorderColor3'] = 'outline',
	})
	library:add_to_registry(main_inner, {
		['BackgroundColor3'] = 'bg',
	})
	
	library:add_to_registry(button_area_inner, {
		['BackgroundColor3'] = 'bg',
		['BorderColor3'] = 'outline',
	})
	
	library:add_to_registry(section_area_inner, {
		['BackgroundColor3'] = 'main',
		['BorderColor3'] = 'outline',
	})
	
	library:add_to_registry(title, {
		['TextColor3'] = 'n_text'
	})
	
	
	-- functions
	function menu:toggle()
		library.gui.Enabled = not library.gui.Enabled
	end
	function menu:tab(name)
		local tab = {}
		
		-- get text bounds
		local size = library:text_bounds(name, 14)
		
		-- create elements
		local tab_frame = library:create('frame', {
			BackgroundColor3 = library.theme.dark_bg,
			BorderColor3 = library.theme.outline,
			Size = u2n(0, size + 30, 1, 0),
			Parent = button_area_inner
		})
		local tab_title = library:create('text', {
			Size = u2n(1, 0, 1, 0),
			Text = name,
			TextColor3 = library.theme.i_text,
			Parent = tab_frame
		})
		
		local tab_content_frame = library:create('frame', {
			BackgroundTransparency = 1,
			Size = u2n(1, 0, 1, 0),
			Visible = false,
			Parent = section_area_inner
		})
		local left_side = library:create('frame', {
			BackgroundTransparency = 1,
			Position = u2n(0, 8, 0, 8),
			Size = u2n(.5, -16, 1, -16),
			Parent = tab_content_frame
		})
		local right_side = library:create('frame', {
			BackgroundTransparency = 1,
			Position = u2n(.5, 8, 0, 8),
			Size = u2n(.5, -16, 1, -16),
			Parent = tab_content_frame
		})
		
		local left_layout = library:create('layout', {
			FillDirection = Enum.FillDirection.Vertical,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = un(0, 10),
			Parent = left_side
		})

		local right_layout = left_layout:Clone()
		right_layout.Parent	= right_side
		
		-- add to registry
		library:add_to_registry(tab_frame, {
			['BackgroundColor3'] = 'dark_bg',
			['BorderColor3'] = 'outline'
		})
		library:add_to_registry(tab_title, {
			['TextColor3'] = 'i_text'
		})
		
		
		-- functions
		function tab:show()
			for i,v in pairs(menu.tabs) do
				v:hide()
			end
			
			tab_frame.BackgroundColor3 = library.theme.dark_main
			tab_title.TextColor3 = library.theme.accent

			library.reg[tab_frame].Properties['BackgroundColor3'] = 'dark_main'
			library.reg[tab_title].Properties['TextColor3'] = 'accent'
			
			tab_content_frame.Visible = true
		end
		function tab:hide()
			tab_frame.BackgroundColor3 = library.theme.dark_bg
			tab_title.TextColor3 = library.theme.i_text

			library.reg[tab_frame].Properties['BackgroundColor3'] = 'dark_bg'
			library.reg[tab_title].Properties['TextColor3'] = 'i_text'

			tab_content_frame.Visible = false
		end
		function tab:section(name, side)
			local section = {}
			
			local size2 = library:text_bounds(name, 14)
			
			-- create elements
			local section_outer = library:create('frame', {
				BackgroundColor3 = c3rgb(0, 0, 0),
				BorderSizePixel = 0,
				Size = u2n(1, 0, 0, 50),
				Parent = side == 0 and left_side or right_side
			})
			local section_inner = library:create('frame', {
				BackgroundColor3 = library.theme.bg,
				BorderColor3 = library.theme.outline,
				Position = u2n(0, 1, 0, 1),
				Size = u2n(1, -2, 1, -2),
				ZIndex = 1,
				Parent = section_outer
			})
			
			local blocker = library:create('frame', {
				BackgroundColor3 = library.theme.main,
				BorderSizePixel = 0,
				Position = u2n(0, 15, 0, -2),
				Size = u2n(0, size2 + 10, 0, 4),
				ZIndex = 3,
				Parent = section_inner
			})
			local accent = library:create('frame', {
				BackgroundColor3 = library.theme.accent,
				BorderSizePixel = 0,
				Position = u2n(0, 1, 0, 1),
				Size = u2n(1, -2, 0, 1),
				ZIndex = 2,
				Parent = section_inner
			})
			local section_title = library:create('text', {
				Position = u2n(0, 20, 0, -1),
				Size = u2n(0, size2, 0, 1),
				Text = name,
				TextColor3 = library.theme.n_text,
				ZIndex = 4,
				Parent = section_inner
			})
			
			local content = library:create('frame', {
				BackgroundTransparency = 1,
				Position = u2n(0, 5, 0, 8),
				Size = u2n(1, -10, 1, -16),
				Parent = section_inner
			})
			local layout = library:create('layout', {
				Padding = un(0, 3),
				FillDirection = Enum.FillDirection.Vertical,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Parent = content
			})
			
			-- add to registry
			library:add_to_registry(section_inner, {
				['BackgroundColor3'] = 'bg',
				['BorderColor3'] = 'outline'
			})
			library:add_to_registry(blocker, {
				['BackgroundColor3'] = 'main'
			})
			library:add_to_registry(accent, {
				['BackgroundColor3'] = 'accent'
			})
			library:add_to_registry(section_title, {
				['TextColor3'] = 'n_text'
			})
			
			
			-- functions
			local function resize()
				section_outer.Size = u2n(1, 0, 0, 10 + layout.AbsoluteContentSize.Y)
			end
			
			library:conn(layout:GetPropertyChangedSignal('AbsoluteContentSize'), resize)
			section.container = content
			setmetatable(section, base)
			
			return section
		end
		
		
		library:conn(tab_frame.InputBegan, function(i) if i.UserInputType == Enum.UserInputType.MouseButton1 then tab:show() end end)
		if #button_area_inner:GetChildren() == 2 then tab:show() end
		menu.tabs[name] = tab
		
		return tab
	end
	
	return menu
end

_G.Sentra = library
return library
